{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template for testing the http-aws-es package on EC2 instances and AWS Lambda",
  "Resources": {
    "secgrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "secgrp"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Ref": "instanceprofile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackId"
                },
                "         --resource instance ",
                "         --configsets full_install ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackId"
                },
                "         --resource instance ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "full_install": [
              "install_cfn",
              "enable_epel",
              "install_node",
              "fetch_code",
              "test"
            ]
          },
          "install_cfn": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.instance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource instance ",
                      "         --configsets full_install ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "enable_epel": {
            "commands": {
              "01_enable_epel": {
                "command": ["yum-config-manager", "--enable", "epel"]
              }
            }
          },
          "install_node": {
            "packages": {
              "yum": {
                "nodejs": [],
                "npm": []
              }
            }
          },
          "fetch_code": {
            "sources": {
              "/etc/http-aws-es-test": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "CodeZipS3Bucket"
                    },
                    ".s3.amazonaws.com/",
                    {
                      "Ref": "CodeZipS3Key"
                    }
                  ]
                ]
              }
            }
          },
          "test": {
            "commands": {
              "test": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "node ec2.js --endpoint=",
                      {
                        "Fn::GetAtt": [
                          "esdomain",
                          "DomainEndpoint"
                        ]
                      },
                      " --region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      " > /home/ec2-user/log.txt"
                    ]
                  ]
                },
                "cwd": "/etc/http-aws-es-test"
              }
            }
          }
        },
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "accessKeyId": {
              "Ref": "s3iamkey"
            },
            "secretKey": {
              "Fn::GetAtt": [
                "s3iamkey",
                "SecretAccessKey"
              ]
            },
            "buckets": [
              {
                "Ref": "CodeZipS3Bucket"
              }
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "DependsOn": [
        "esdomain"
      ]
    },
    "esdomain": {
      "Type": "AWS::Elasticsearch::Domain",
      "Properties": {
        "ElasticsearchClusterConfig": {
          "InstanceCount": 1,
          "InstanceType": "t2.micro.elasticsearch"
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "VolumeType": "gp2",
          "VolumeSize": 10
        }
      }
    },
    "lambdafunc": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "nodejs4.3",
        "Code": {
          "S3Bucket": {
            "Ref": "CodeZipS3Bucket"
          },
          "S3Key": {
            "Ref": "CodeZipS3Key"
          }
        },
        "Handler": "lambda.handler",
        "Timeout": 15,
        "Role": {
          "Fn::GetAtt": [
            "role",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "esdomain",
        "role"
      ]
    },
    "instanceprofile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "role"
          }
        ]
      }
    },
    "role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "s3iamuser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "read-code-s3-bucket",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:GetObject",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "CodeZipS3Bucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "s3iamkey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "s3iamuser"
        }
      }
    },
    "elasticsearchpolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "elasticsearch-policy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "es:*",
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "role"
          }
        ]
      }
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "PV64": "ami-2a69aa47"
      },
      "us-west-2": {
        "PV64": "ami-7f77b31f"
      },
      "us-west-1": {
        "PV64": "ami-a2490dc2"
      },
      "eu-west-1": {
        "PV64": "ami-4cdd453f"
      },
      "eu-central-1": {
        "PV64": "ami-6527cf0a"
      },
      "ap-northeast-1": {
        "PV64": "ami-3e42b65f"
      },
      "ap-southeast-1": {
        "PV64": "ami-df9e4cbc"
      },
      "ap-southeast-2": {
        "PV64": "ami-63351d00"
      },
      "sa-east-1": {
        "PV64": "ami-1ad34676"
      },
      "cn-north-1": {
        "PV64": "ami-77559f1a"
      }
    }
  },
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t1.micro",
      "AllowedValues": [
        "t1.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "CodeZipS3Bucket": {
      "Description": "S3 bucket for code archive",
      "Type": "String"
    },
    "CodeZipS3Key": {
      "Description": "S3 key for code archive",
      "Type": "String"
    }
  },
  "Outputs": {
    "SSHCommand": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh ec2-user@",
            {
              "Fn::GetAtt": [
                "instance",
                "PublicDnsName"
              ]
            },
            " cat log.txt"
          ]
        ]
      },
      "Description": "Command line to SSH into the newly started instance"
    },
    "LambdaFunctionName": {
      "Value": {
        "Ref": "lambdafunc"
      },
      "Description": "Name of the lambda function"
    },
    "ElasticsearchEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "esdomain",
          "DomainEndpoint"
        ]
      },
      "Description": "HTTPS endpoint of the Elasticsearch domain"
    }
  }
}
